-- PROCEDURE WHICH GROUP BY INFO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- CREATE OR REPLACE PROCEDURE use_payment AS
-- BEGIN
-- DECLARE
--     num_kaspi_clients NUMBER;
--     num_cash_clients NUMBER;
--     num_creditcard_clients NUMBER;
--   BEGIN
--     SELECT COUNT(*) INTO num_kaspi_clients FROM client_payment WHERE payment_method_id = 1;
--     SELECT COUNT(*) INTO num_cash_clients FROM client_payment WHERE payment_method_id = 2;
--     SELECT COUNT(*) INTO num_creditcard_clients FROM client_payment WHERE payment_method_id = 3;
--     DBMS_OUTPUT.PUT_LINE('Number of clients using Kaspi: ' || num_kaspi_clients);
--     DBMS_OUTPUT.PUT_LINE('Number of clients using cash: ' || num_cash_clients);
--     DBMS_OUTPUT.PUT_LINE('Number of clients using credit card: ' || num_creditcard_clients);
--   END;
-- END;

-- BEGIN
--     use_payment;
-- END;


-- CREATE OR REPLACE PROCEDURE made_payment AS
-- BEGIN
-- DECLARE
--     num_kaspi_payments NUMBER;
--     num_cash_payments NUMBER;
--     num_creditcard_payments NUMBER;
--   BEGIN
--     SELECT COUNT(*) INTO num_kaspi_payments FROM kaspi_payment;
--     SELECT COUNT(*) INTO num_cash_payments FROM cash_payment;
--     SELECT COUNT(*) INTO num_creditcard_payments FROM creditcard_payment;
--     DBMS_OUTPUT.PUT_LINE('Number of payments made with Kaspi: ' || num_kaspi_payments);
--     DBMS_OUTPUT.PUT_LINE('Number of payments made with cash: ' || num_cash_payments);
--     DBMS_OUTPUT.PUT_LINE('Number of payments made with credit card: ' || num_creditcard_payments);
--   END;
-- END;

-- BEGIN
--     made_payment;
-- END;


-- CREATE OR REPLACE PROCEDURE avg_salary AS
-- BEGIN
-- DECLARE
--     manager_avg_salary NUMBER;
--     assistant_avg_salary NUMBER;
--     it_manager_avg_salary NUMBER;
--     hr_avg_salary NUMBER;
--   BEGIN
--     SELECT AVG(salary) INTO manager_avg_salary FROM EMPLOYEES WHERE department_id = 1;
--     SELECT AVG(salary) INTO assistant_avg_salary FROM EMPLOYEES WHERE department_id = 2;
--     SELECT AVG(salary) INTO it_manager_avg_salary FROM EMPLOYEES WHERE department_id = 3;
--     SELECT AVG(salary) INTO hr_avg_salary FROM EMPLOYEES WHERE department_id = 4;
--     DBMS_OUTPUT.PUT_LINE('Average salary for Managers: ' || manager_avg_salary);
--     DBMS_OUTPUT.PUT_LINE('Average salary for Assistants: ' || assistant_avg_salary);
--     DBMS_OUTPUT.PUT_LINE('Average salary for IT managers: ' || it_manager_avg_salary);
--     DBMS_OUTPUT.PUT_LINE('Average salary for HR: ' || hr_avg_salary);
--   END;
-- END;

-- begin
--  avg_salary;
-- end;


-- FUNCTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- DROP FUNCTION count_records
-- CREATE OR REPLACE FUNCTION count_records
--   (table_name IN VARCHAR2)
--   RETURN NUMBER
--   IS
--   total_count NUMBER;
-- BEGIN
--    EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || table_name INTO total_count;
--   RETURN total_count;
-- END;

-- DECLARE
--   total_count NUMBER;
-- BEGIN
--   total_count := count_records('employees');
--   DBMS_OUTPUT.PUT_LINE('Number of records in employees table: ' || total_count);
-- END;

-- select * from employees

-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- DROP FUNCTION get_count
-- CREATE OR REPLACE FUNCTION get_count
-- RETURN NUMBER IS
--     total_c number;
--     BEGIN
--     SELECT count(*) INTO total_c FROM employees;
--     RETURN total_c;
-- END;

-- DECLARE 
--    total_count number; 
-- BEGIN 
--    total_count := get_count(); 
--    DBMS_OUTPUT.PUT_LINE('Number of records in employees table: ' || total_count); 
-- END; 

-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- DROP FUNCTION count_orders_by_employee
-- CREATE OR REPLACE FUNCTION count_orders_by_employee 
-- RETURN SYS_REFCURSOR AS
--     result_set SYS_REFCURSOR;
-- BEGIN
--     OPEN result_set FOR
--         SELECT e.employee_name, COUNT(*) AS order_count
--         FROM employees e
--         JOIN orders o ON e.employee_id = o.emp_id
--         GROUP BY e.employee_name;
--     RETURN result_set;
-- END;

-- DECLARE
--     result_set SYS_REFCURSOR;
--     employee_name VARCHAR2(45);
--     order_count NUMBER;
-- BEGIN
--     result_set := count_orders_by_employee;
--     LOOP
--         FETCH result_set INTO employee_name, order_count;
--         EXIT WHEN result_set%NOTFOUND;
--         DBMS_OUTPUT.PUT_LINE('Employee ' || employee_name || ' has ' || order_count || ' orders.');
--     END LOOP;
-- END;


-- PROCEDURE SQL%ROWCOUNT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- CREATE OR REPLACE PROCEDURE update_salary (
--   d_id IN NUMBER,
--   salary_increase IN NUMBER
-- )
-- IS
-- BEGIN
--   UPDATE employees
--   SET salary = salary - salary_increase
--   WHERE department_id = d_id;
  
--   IF SQL%ROWCOUNT > 0 THEN
--     DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' rows updated.');
--   ELSE
--     DBMS_OUTPUT.PUT_LINE('No rows updated.');
--   END IF;
-- END;

-- DECLARE
--     department_id employees.department_id%TYPE := 1;
--     salary number := 110000;
-- BEGIN
--     update_salary(department_id, salary);
-- END;

-- select * from employees;



-- TRIGGER !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- drop trigger trigger_for_client
-- CREATE OR REPLACE TRIGGER trigger_for_client
-- BEFORE INSERT ON client
-- FOR EACH ROW
-- DECLARE
--     count_row number;
-- BEGIN
--     SELECT COUNT(*) INTO count_row FROM client;
--     DBMS_OUTPUT.PUT_LINE('Before inser = '||count_row);
-- END;

-- insert into client values (111, 'Akerke');
-- select * from client




-- EXCEPTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

DECLARE 
    product_id products.product_id%TYPE := :id;
    category_id products.category_id%TYPDE := 1;
    product_name products.product_name%TYPE := :product_name;
    quantity products.quntity%TYPE := 1;
    price products.QUNTITY%TYPE := :price;
    supplier_id products.supplier_id%type := 1;
    invalid_data EXCEPTION;

BEGIN
    IF length(product_name) < 5 THEN
    raise invalid_data;
    ELSE 
    INSERT INTO products (product_id, category_id, product_name, quntity, price, supplier_id) values (product_id, category_id, product_name, quantity, price, supplier_id);
    ELSE IF;

EXCEPTION
    WHEN invalid_data THEN 
    DBMS_OUTPUT.PUT_LINE('Invalid name entered.');
    WHEN others THEN 
    DBMS_OUTPUT.PUT_LINE('Error!');
END;
